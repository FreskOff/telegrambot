# crypto/handler.py
# –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏.

import logging
from telegram import Update, constants
from telegram.ext import CallbackContext
from sqlalchemy.ext.asyncio import AsyncSession

from utils.api_clients import coingecko_client
from ai.formatter import format_data_with_ai
from database import operations as db_ops

logger = logging.getLogger(__name__)

# –≠—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∫—ç—à/–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
COIN_ID_MAP = {
    "BTC": "bitcoin",
    "ETH": "ethereum",
    "SOL": "solana",
    "VRA": "verasity" 
}

async def get_coin_ids_from_symbols(symbols: list[str]) -> tuple[list[str], list[str]]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ ID –¥–ª—è CoinGecko, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à –∏ API.
    """
    found_ids = []
    not_found_symbols = []
    for symbol in symbols:
        upper_symbol = symbol.strip().upper()
        # 1. –ò—â–µ–º –≤ –Ω–∞—à–µ–º –∫—ç—à–µ
        coin_id = COIN_ID_MAP.get(upper_symbol)
        
        # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º —á–µ—Ä–µ–∑ API
        if not coin_id:
            coin_id = await coingecko_client.search_coin(symbol)
        
        if coin_id:
            found_ids.append(coin_id)
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if upper_symbol not in COIN_ID_MAP:
                COIN_ID_MAP[upper_symbol] = coin_id
        else:
            not_found_symbols.append(symbol)
            
    return found_ids, not_found_symbols

async def handle_crypto_info_request(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ.
    """
    if not update.effective_message: return
    
    user_id = update.effective_user.id
    symbols = payload.split(',')
    coin_ids, not_found = await get_coin_ids_from_symbols(symbols)

    if not coin_ids:
        response_text = f"üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –º–æ–Ω–µ—Ç–∞–º: '{payload}'."
        await update.effective_message.reply_text(response_text)
        await db_ops.add_chat_message(session=db_session, user_id=user_id, role='model', text=response_text)
        return

    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=constants.ChatAction.TYPING)
        price_data = await coingecko_client.get_simple_price(coin_ids=coin_ids)

        if not price_data:
            response_text = "üìâ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö. API –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            await update.effective_message.reply_text(response_text)
            await db_ops.add_chat_message(session=db_session, user_id=user_id, role='model', text=response_text)
            return

        formatted_response = await format_data_with_ai(price_data)

        if not_found:
            formatted_response += f"\n\n_–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ: {', '.join(not_found)}_"

        await update.effective_message.reply_text(
            formatted_response,
            parse_mode=constants.ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        await db_ops.add_chat_message(session=db_session, user_id=user_id, role='model', text=formatted_response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—Ä–∏–ø—Ç–æ-–∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await update.effective_message.reply_text("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ.")