# ai/formatter.py
# –ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫—Ä–∞—Å–∏–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

import os
import logging
import json
import httpx
from dotenv import load_dotenv

logger = logging.getLogger(__name__)
load_dotenv()

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={GEMINI_API_KEY}"

# --- –ü–†–û–ú–ü–¢ –†–ê–ó–î–ï–õ–ï–ù –ù–ê –ß–ê–°–¢–ò –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ô –°–ë–û–†–ö–ò ---
FORMATTER_PROMPT_PART_1 = """
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¢–û–õ–¨–ö–û —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON-–¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.
- –ò—Å–ø–æ–ª—å–∑—É–π Markdown: *–∂–∏—Ä–Ω—ã–π* –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏ —Ü–µ–Ω, _–∫—É—Ä—Å–∏–≤_ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏–π.
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏: üìà, üìâ, üí∞, üìä.
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π, –ù–ï –≤—ã—á–∏—Å–ª—è–π –∏ –ù–ï –∏–∑–º–µ–Ω—è–π –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ —Ä–∞–≤–Ω–æ 0, —Ç–∞–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–π.
- –ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.

–ü—Ä–∏–º–µ—Ä:
JSON: {"bitcoin": {"usd": 65000, "usd_market_cap": 1280000000000, "usd_24h_vol": 35000000000, "usd_24h_change": -2.5}}
–û–¢–í–ï–¢:
üìä *Bitcoin (BTC)*
*–¶–µ–Ω–∞:* $65,000.00
*–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:* $1,280,000,000,000
*–û–±—ä–µ–º (24—á):* $35,000,000,000
*–ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á):* -2.50% üìâ

JSON –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
```json
"""

FORMATTER_PROMPT_PART_2 = """
```
–¢–≤–æ–π –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:
"""

async def format_data_with_ai(data: dict) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –≤ –º–æ–¥–µ–ª—å Gemini –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    if not GEMINI_API_KEY:
        return f"```json\n{json.dumps(data, indent=2, ensure_ascii=False)}\n```"

    json_string = json.dumps(data, indent=2, ensure_ascii=False)
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é ---
    prompt = FORMATTER_PROMPT_PART_1 + json_string + FORMATTER_PROMPT_PART_2

    headers = {'Content-Type': 'application/json'}
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {"temperature": 0.0, "maxOutputTokens": 1024}
    }
    try:
        async with httpx.AsyncClient(timeout=20.0) as client:
            response = await client.post(GEMINI_API_URL, json=payload, headers=headers)
            response.raise_for_status()
            api_data = response.json()
            formatted_text = api_data["candidates"][0]["content"]["parts"][0]["text"].strip()
            if not formatted_text:
                return f"```json\n{json.dumps(data, indent=2, ensure_ascii=False)}\n```"
            return formatted_text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ò–ò-–§–æ—Ä–º–∞—Ç—Ç–µ—Ä–µ: {e}")
        return f"```json\n{json.dumps(data, indent=2, ensure_ascii=False)}\n```"