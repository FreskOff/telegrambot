# settings/user.py
# –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ –∞–ª–µ—Ä—Ç—ã –∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.

import logging
from telegram import Update, constants
from telegram.ext import CallbackContext
from sqlalchemy.ext.asyncio import AsyncSession

from database import operations as db_ops
from crypto.handler import COIN_ID_MAP

logger = logging.getLogger(__name__)

async def handle_setup_alert(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞.
    """
    if not update.effective_message: return
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è user_id={user_id} —Å payload='{payload}'")

    try:
        payload = payload.replace("=", ":")
        parts = payload.split(':')
        
        if len(parts) == 3:
            symbol, price_str, direction = parts
        elif len(parts) == 2:
            symbol, price_str = parts
            direction = 'above'
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload –¥–ª—è –∞–ª–µ—Ä—Ç–∞.")
        
        symbol = symbol.strip().upper()
        direction = direction.strip().lower()
        price_str = price_str.replace(" ", "")
        
        if symbol not in COIN_ID_MAP:
            await update.effective_message.reply_text(f"üòï –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã: {symbol}.")
            return

        price = float(price_str)
        if direction not in ['above', 'below']:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")

        alert = await db_ops.add_price_alert(
            session=db_session, user_id=user_id, symbol=symbol, price=price, direction=direction
        )

        direction_text = "–≤—ã—à–µ" if direction == 'above' else "–Ω–∏–∂–µ"
        confirmation_message = (
            f"‚úÖ *–ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*\n\n"
            f"–Ø —Å–æ–æ–±—â—É –≤–∞–º, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ *{alert.coin_symbol}* —Å—Ç–∞–Ω–µ—Ç {direction_text} *${alert.target_price:,.2f}*."
        )
        await update.effective_message.reply_text(confirmation_message, parse_mode=constants.ParseMode.MARKDOWN)
        await db_ops.add_chat_message(session=db_session, user_id=user_id, role='model', text=confirmation_message)

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ payload –¥–ª—è –∞–ª–µ—Ä—Ç–∞: {e}")
        error_text = "üòï –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n`—Å–æ–æ–±—â–∏ –∫–æ–≥–¥–∞ BTC –±—É–¥–µ—Ç –≤—ã—à–µ 70000`"
        await update.effective_message.reply_text(error_text)
        await db_ops.add_chat_message(session=db_session, user_id=user_id, role='model', text=error_text)

async def handle_manage_alerts(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏, –≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ.
    """
    if not update.effective_message: return
    user_id = update.effective_user.id
    
    action_parts = payload.split(':')
    action = action_parts[0].strip().lower() if action_parts else "list"
    
    response_message = ""

    if action == 'list':
        active_alerts = await db_ops.get_user_alerts(session=db_session, user_id=user_id)
        if not active_alerts:
            response_message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤."
        else:
            message_lines = ["üîî *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:*\n"]
            for alert in active_alerts:
                direction_text = "üìà >" if alert.direction.value == 'above' else "üìâ <"
                line = f"‚Ä¢ *{alert.coin_symbol}*: {direction_text} ${alert.target_price:,.2f}"
                message_lines.append(line)
            response_message = "\n".join(message_lines)
            
    elif action == 'delete' and len(action_parts) > 1:
        symbol_to_delete = action_parts[1].strip().upper()
        deleted_count = await db_ops.delete_user_alerts_by_symbol(session=db_session, user_id=user_id, symbol=symbol_to_delete)
        if deleted_count > 0:
            response_message = f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∞–ª–µ—Ä—Ç(–æ–≤) –¥–ª—è *{symbol_to_delete}*."
        else:
            response_message = f"ü§î –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è *{symbol_to_delete}*, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —É–¥–∞–ª–∏—Ç—å."
    else:
        response_message = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–º–æ–∏ –∞–ª–µ—Ä—Ç—ã' –∏–ª–∏ '—É–¥–∞–ª–∏ –∞–ª–µ—Ä—Ç –¥–ª—è BTC'."

    await update.effective_message.reply_text(response_message, parse_mode=constants.ParseMode.MARKDOWN)
    await db_ops.add_chat_message(session=db_session, user_id=user_id, role='model', text=response_message)