# analysis/handler.py
# –ú–æ–¥—É–ª—å –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤, –≤–∫–ª—é—á–∞—è –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π.

import logging
import json
import os
import httpx
from dotenv import load_dotenv
from telegram import Update, constants
from telegram.ext import CallbackContext
from sqlalchemy.ext.asyncio import AsyncSession

from database import operations as db_ops

logger = logging.getLogger(__name__)
load_dotenv()

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={GEMINI_API_KEY}"

ANALYSIS_PROMPT = """
–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–∏–ø—Ç–æ-–∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ Google –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É (3-5 –∞–±–∑–∞—Ü–µ–≤) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1.  **–ö–ª—é—á–µ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:** –£–ø–æ–º—è–Ω–∏ 2-3 —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∏ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.
2.  **–û–±—â–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç:** –û–ø–∏—à–∏ –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ —Ç–æ–∫–µ–Ω–∞.
3.  **–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:** –°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥.

–ù–µ –¥–∞–≤–∞–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π Markdown.

**–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** "{user_query}"
**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (JSON):**
```json
{search_results}
```
–¢–≤–æ—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞:
"""

async def handle_token_analysis(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    if not update.effective_message: return
    user_id = update.effective_user.id
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload –Ω–µ –ø—É—Å—Ç–æ–π ---
    if not payload:
        await update.effective_message.reply_text("üòï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –æ –∫–∞–∫–æ–º —Ç–æ–∫–µ–Ω–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.")
        return

    query = f"–Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {payload}"
    await update.effective_message.reply_text(f"üîç –ò—â—É –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{payload}*. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥...", parse_mode=constants.ParseMode.MARKDOWN)
    
    try:
        search_results_list = google_search.search(queries=[query])
        
        if not search_results_list or not search_results_list[0].results:
            await update.effective_message.reply_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            return

        search_results = search_results_list[0].results
        prompt = ANALYSIS_PROMPT.format(user_query=payload, search_results=json.dumps(search_results, indent=2, ensure_ascii=False))
        
        headers = {'Content-Type': 'application/json'}
        api_payload = {"contents": [{"parts": [{"text": prompt}]}], "generationConfig": {"temperature": 0.5, "maxOutputTokens": 2048}}

        async with httpx.AsyncClient(timeout=40.0) as client:
            response = await client.post(GEMINI_API_URL, json=api_payload, headers=headers)
            response.raise_for_status()
            api_data = response.json()
            analysis_text = api_data["candidates"][0]["content"]["parts"][0]["text"].strip()

        final_message = f"üìä *–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ {payload}*\n\n{analysis_text}"
        await update.effective_message.reply_text(final_message, parse_mode=constants.ParseMode.MARKDOWN, disable_web_page_preview=True)
        await db_ops.add_chat_message(session=db_session, user_id=user_id, role='model', text=final_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞: {e}", exc_info=True)
        await update.effective_message.reply_text("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")