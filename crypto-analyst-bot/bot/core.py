# bot/core.py
# –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

import logging
import re
from telegram import Update, constants
from telegram.ext import CallbackContext
from sqlalchemy.ext.asyncio import AsyncSession

# --- –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ ---
from ai.dispatcher import classify_intent, extract_entities
from database import operations as db_ops
from crypto.handler import handle_crypto_info_request
from settings.user import handle_setup_alert, handle_manage_alerts
from ai.general import handle_general_ai_conversation
from analysis.handler import handle_token_analysis

logger = logging.getLogger(__name__)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–≥–ª—É—à–∫–∏ ---
async def handle_unsupported_request(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    error_map = {
        "AI_RATE_LIMIT": "‚è≥ –ö–∞–∂–µ—Ç—Å—è, —è —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–µ–Ω –∏ –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–≤–æ–µ–º—É AI-–º–æ–∑–≥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
        "AI_API_HTTP_ERROR": "üîß –í–æ–∑–Ω–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        "AI_SERVICE_UNCONFIGURED": "üîß –ú–æ–π AI-–º–æ–¥—É–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –º–æ–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    }
    response_text = error_map.get(payload, f"üòï –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
    await update.effective_message.reply_text(response_text)
    await db_ops.add_chat_message(session=db_session, user_id=update.effective_user.id, role='model', text=response_text)

async def handle_bot_help(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    user_id = update.effective_user.id
    help_text = (
        "ü§ñ *–Ø - –≤–∞—à –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ö—Ä–∏–ø—Ç–æ-–ê–Ω–∞–ª–∏—Ç–∏–∫!*\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n"
        "‚ñ´Ô∏è *'–∫–∞–∫–∞—è —Ü–µ–Ω–∞ —É –±–∏—Ç–∫–æ–∏–Ω–∞?'* - —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É\n"
        "‚ñ´Ô∏è *'—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ solana'* - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞\n"
        "‚ñ´Ô∏è *'–≥–¥–µ –∫—É–ø–∏—Ç—å btc?'* - –º–µ—Å—Ç–∞ –ø–æ–∫—É–ø–∫–∏\n"
        "‚ñ´Ô∏è *'–∫–∞–∫–∏–µ ico —Å–∫–æ—Ä–æ?'* - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–º–∞—Ä–∫–µ—Ç–∞\n"
        "‚ñ´Ô∏è *'—á—Ç–æ —Ç–∞–∫–æ–µ DeFi?'* - –æ–±—É—á–∞—é—â–∏–µ —É—Ä–æ–∫–∏\n"
        "‚ñ´Ô∏è *'—Å–æ–æ–±—â–∏ –∫–æ–≥–¥–∞ eth –±—É–¥–µ—Ç 4000'* - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤\n"
        "‚ñ´Ô∏è *'–º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å'* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
    )
    await update.effective_message.reply_text(help_text, parse_mode=constants.ParseMode.MARKDOWN)
    await db_ops.add_chat_message(session=db_session, user_id=user_id, role='model', text=help_text)

# ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏)
async def handle_where_to_buy(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    await update.effective_message.reply_text(f"‚è≥ –ò—â—É, –≥–¥–µ –∫—É–ø–∏—Ç—å *{payload}*...", parse_mode=constants.ParseMode.MARKDOWN)
async def handle_premarket_scan(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    await update.effective_message.reply_text("‚è≥ –°–∫–∞–Ω–∏—Ä—É—é –ø—Ä–µ–º–∞—Ä–∫–µ—Ç...", parse_mode=constants.ParseMode.MARKDOWN)
async def handle_edu_lesson(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    await update.effective_message.reply_text(f"‚è≥ –ì–æ—Ç–æ–≤–ª—é —É—Ä–æ–∫ –ø–æ —Ç–µ–º–µ *'{payload}'*...", parse_mode=constants.ParseMode.MARKDOWN)
async def handle_track_coin(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    if not payload:
        await update.effective_message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã.")
        return
    await handle_portfolio_summary(update, context, f"add {payload}", db_session)
async def handle_untrack_coin(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    if not payload:
        await update.effective_message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã.")
        return
    await handle_portfolio_summary(update, context, f"remove {payload}", db_session)
async def handle_portfolio_summary(update: Update, context: CallbackContext, payload: str, db_session: AsyncSession):
    if not update.effective_message:
        return

    user_id = update.effective_user.id
    parts = payload.split()
    action = parts[0].lower() if parts else "list"

    if action == "add" and len(parts) >= 2:
        symbol = parts[1]
        quantity = float(parts[2]) if len(parts) >= 3 else 0.0
        price = float(parts[3]) if len(parts) >= 4 else 0.0
        await db_ops.add_coin_to_portfolio(db_session, user_id, symbol, quantity, price)
        response = f"‚úÖ –ú–æ–Ω–µ—Ç–∞ *{symbol.upper()}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å."

    elif action == "remove" and len(parts) >= 2:
        symbol = parts[1]
        removed = await db_ops.remove_coin_from_portfolio(db_session, user_id, symbol)
        response = "üöÆ –ú–æ–Ω–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞." if removed else "–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ."

    else:
        portfolio = await db_ops.get_user_portfolio(db_session, user_id)
        if not portfolio:
            response = "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç."
        else:
            symbols = [c.coin_symbol for c in portfolio]
            coin_ids, _ = await get_coin_ids_from_symbols(symbols)
            price_data = await coingecko_client.get_simple_price(coin_ids)
            lines = ["üíº *–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:*\n"]
            total_value = 0.0
            for coin in portfolio:
                coin_id = COIN_ID_MAP.get(coin.coin_symbol)
                price = price_data.get(coin_id, {}).get("usd", 0)
                value = (coin.quantity or 0) * price
                total_value += value
                profit = value - (coin.quantity or 0) * (coin.buy_price or 0)
                lines.append(
                    f"‚Ä¢ *{coin.coin_symbol}*: {coin.quantity:g} —à—Ç. | —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ${price:,.2f} | P/L ${profit:,.2f}"
                )
            lines.append(f"\n–í—Å–µ–≥–æ: ${total_value:,.2f}")
            response = "\n".join(lines)

    await update.effective_message.reply_text(response, parse_mode=constants.ParseMode.MARKDOWN)
    await db_ops.add_chat_message(session=db_session, user_id=user_id, role='model', text=response)


async def get_symbol_from_context(session: AsyncSession, user_id: int) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–ø–æ–º—è–Ω—É—Ç—ã–π —Å–∏–º–≤–æ–ª –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞."""
    history = await db_ops.get_chat_history(session, user_id, limit=4)
    for msg in reversed(history):
        if msg.role == 'model':
            # –ò—â–µ–º —Ç–∏–∫–µ—Ä—ã, –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞
            found = re.findall(r'\*([A-Z]{2,5})\*', msg.message_text)
            if found:
                logger.info(f"–ù–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {found[0]}")
                return found[0]
    return None

async def handle_update(update: Update, context: CallbackContext, db_session: AsyncSession):
    message = update.effective_message
    user = update.effective_user
    if not user or not message or not message.text: return

    user_input = message.text.strip()
    db_user = await db_ops.get_or_create_user(session=db_session, tg_user=user)
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {db_user.id}: '{user_input}'")
    
    await db_ops.add_chat_message(session=db_session, user_id=user.id, role='user', text=user_input)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ë–ï–ó AI ---
    hardcoded_commands = {
        '/start': handle_bot_help,
        '/help': handle_bot_help,
        '/portfolio': handle_portfolio_summary,
        '/alerts': handle_manage_alerts
    }
    if user_input.lower() in hardcoded_commands:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {user_input.lower()}")
        await hardcoded_commands[user_input.lower()](update, context, "list", db_session)
        return

    try:
        await context.bot.send_chat_action(chat_id=message.chat_id, action=constants.ChatAction.TYPING)
        
        # –®–∞–≥ 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        intent = await classify_intent(user_input)
        logger.info(f"–®–∞–≥ 1: –ù–∞–º–µ—Ä–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ '{intent}'")

        # –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        entities = await extract_entities(intent, user_input)
        logger.info(f"–®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {entities}")

        payload = next(iter(entities.values()))

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---
        intents_needing_context = ["CRYPTO_INFO", "TOKEN_ANALYSIS", "WHERE_TO_BUY"]
        pronouns = ['–µ–≥–æ', '–µ–µ', '–∏—Ö', '–Ω–µ–≥–æ', '–æ –Ω–µ–º']
        if intent in intents_needing_context and any(p in user_input.lower() for p in pronouns):
            context_symbol = await get_symbol_from_context(db_session, user.id)
            if context_symbol:
                payload = context_symbol
                logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω. –ù–æ–≤—ã–π payload: {payload}")

        handlers = {
            "GENERAL_CHAT": handle_general_ai_conversation,
            "CRYPTO_INFO": handle_crypto_info_request,
            "TOKEN_ANALYSIS": handle_token_analysis,
            "WHERE_TO_BUY": handle_where_to_buy,
            "PREMARKET_SCAN": handle_premarket_scan,
            "EDU_LESSON": handle_edu_lesson,
            "SETUP_ALERT": handle_setup_alert,
            "MANAGE_ALERTS": handle_manage_alerts,
            "TRACK_COIN": handle_track_coin,
            "UNTRACK_COIN": handle_untrack_coin,
            "PORTFOLIO_SUMMARY": handle_portfolio_summary,
            "BOT_HELP": handle_bot_help,
        }
        
        handler = handlers.get(intent, handle_unsupported_request)
        await handler(update, context, payload, db_session)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.reply_text("üí• –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")